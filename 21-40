#574. Winning Candidate
SELECT Candidate.Name FROM Candidate 
WHERE id = (SELECT CandidateId FROM Vote GROUP BY CandidateId ORDER BY count(id) DESC LIMIT 1)

#577. Employee Bonus
Select Employee.name, Bonus.bonus
from Employee 
left join Bonus on Employee.empId = Bonus.empId
where Bonus.bonus < 1000 or Bonus.bonus IS NULL;

#578. Get Highest Answer Rate Question
WITH tmp as (
SELECT question_id, sum(case when answer_id is not null then 1 else 0 end)/count(*) as rate
from survey_log 
group by question_id)

select question_id as survey_log 
from tmp
where rate in (select max(rate) from tmp)

#579. Find Cumulative Salary of an Employee
select e.id, e.month, 
       sum(e.salary)over(partition by e.id order by e.month rows between 2 preceding and current row) salary
from employee e
where e.month<>(select max(e1.month) from employee e1 where e1.id=e.id  )
order by 1 asc, 2 desc

#580. Count Student Number in Departments
Select department.dept_name, count(student.dept_id) student_number from department 
left join student on student.dept_id =  department.dept_id
group by department.dept_name
order by student_number DESC, department.dept_name; 

#584. Find Customer Referee
Select name from customer
where referee_id != 2 OR referee_id IS NULL;

#585. Investments in 2016
Select sum(TIV_2016) TIV_2016 from insurance a
where (Select count(*) from insurance b where a.TIV_2015=b.TIV_2015)>1
and (Select count(*) from insurance c where (a.LAT, a.LON) = (c.LAT, c.LON))=1;

#586. Customer Placing the Largest Number of Orders
select customer_number from orders
group by customer_number
order by count(customer_number)  DESC
limit 1

#595. Big Countries
Select name, population, area from World
Where population > 25000000 or area > 3000000
order by name;

#596. Classes More Than 5 Students
Select class FROM courses
GROUP BY class
Having count( DISTINCT student)>=5; # highlight distinct 

#597. Friend Requests I: Overall Acceptance Rate
#Distinct two columns 
Select round(ifnull(count(distinct requester_id, accepter_id)/count(distinct sender_id, send_to_id),0),2) accept_rate 
from FriendRequest, RequestAccepted

#601. Human Traffic of Stadium ***
with rank_diff as (select *, rank() over (order by id asc) as `rank`,id - rank() over (order by id asc) as difference
from stadium where people >= 100), 
diff_counts as (
select  difference,
count(*) as count
from rank_diff 
group by difference)

select id, visit_date, people
from rank_diff
where difference in (select difference from diff_counts where count >= 3)
order by visit_date asc

#602. Friend Requests II: Who Has the Most Friends
###Self-Join two table, Union all pairs. 
select id1 as id, count(id2) as num
from
(select requester_id as id1, accepter_id as id2 
from request_accepted
union
select accepter_id as id1, requester_id as id2 
from request_accepted) tmp1
group by id1 
order by num desc limit 1


#603. Consecutive Available Seats
Select seat_id from (
Select seat_id, free, LAG(free,1) Over (Order By seat_id) as Free_lag, 
LEAD(free,1) Over (Order By seat_id) as Free_lead from cinema) as t
where (free = 1 and Free_lag = 1)
or (free = 1 and Free_lead = 1)
order by seat_id;

#607. Sales Person
Select s.name from salesperson s
where sales_id not in (select sales_id from orders 
                      left join company on orders.com_id = company.com_id
                      where company.name = 'RED')

#608. Tree Node
#Self-join two table with CASE WHEN FUNCTION
Select DISTINCT t1.id, (case when t1.p_id IS NULL then 'Root'
           when t1.p_id IS NOT NULL and t2.id IS NOT NULL then 'Inner'
           when t1.p_id IS NOT NULL and t2.id IS NULL then 'Leaf'
           END) as Type
From Tree t1 Left Join tree t2
on t1.id = t2.p_id

#610. Triangle Judgement
SELECT x, y, z,
CASE WHEN x+y<=z OR
          x+z<=y OR
          y+z<=x
     THEN 'No'
     ELSE 'Yes'
END AS 'triangle'
FROM triangle;

#612. Shortest Distance in a Plane ***
select ROUND(SQRT(min((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y))),2) as shortest
from point_2d p1,point_2d p2
where p1.x <> p2.x or p1.y <> p2.y;

#613. Shortest Distance in a Line
SELECT MIN(a.x - b.x) AS shortest
FROM point a, point b
WHERE a.x > b.x; 

#614. Second Degree Follower
Select f1.follower, count(distinct f2.follower) as num
from follow f1
inner join follow f2 on f1.follower = f2.followee
Group by f1.follower
