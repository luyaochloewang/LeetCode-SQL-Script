#1112. Highest Grade For Each Student
SELECT t.student_id, t.course_id, t.grade
FROM 
	(SELECT student_id, course_id, grade, 
	row_number() over (partition by student_id order by grade desc, course_id asc) as r 
	FROM Enrollments) t
WHERE t.r=1
ORDER BY t.student_id asc

With cte as (SELECT student_id, course_id, grade, 
	rank() over (partition by student_id order by grade desc, course_id asc) as r 
	FROM Enrollments) 
        
Select cte.student_id, cte.course_id, cte.grade from cte
where r = 1

#1113. Reported Posts
select extra as report_reason, count(distinct post_id) as report_count
from Actions
where action_date='2019-07-04' 
and extra is not null 
and action='report'
group by extra

#1126. Active Businesses
Select business_id from (
select event_type, avg(occurences) avg_occurences from events e1
group by event_type) as temp1
join events e2 on temp1.event_type = e2.event_type
where e2.occurences > temp1.avg_occurences 
group by business_id
having count(distinct temp1.event_type)>1

#1127. User Purchase Platform ***
# Write your MySQL query statement below
SELECT 
    p.spend_date,
    p.platform,
    IFNULL(SUM(amount), 0) total_amount,
    COUNT(user_id) total_users
FROM 
(
    SELECT DISTINCT(spend_date), 'desktop' platform FROM Spending
    UNION
    SELECT DISTINCT(spend_date), 'mobile' platform FROM Spending
    UNION
    SELECT DISTINCT(spend_date), 'both' platform FROM Spending
) p 
LEFT JOIN (
    SELECT
        spend_date,
        user_id,
        IF(mobile_amount > 0, IF(desktop_amount > 0, 'both', 'mobile'), 'desktop') platform,
        (mobile_amount + desktop_amount) amount
    FROM (
        SELECT
          spend_date,
          user_id,
          SUM(CASE platform WHEN 'mobile' THEN amount ELSE 0 END) mobile_amount,
          SUM(CASE platform WHEN 'desktop' THEN amount ELSE 0 END) desktop_amount
        FROM Spending
        GROUP BY spend_date, user_id
    ) o
) t
ON p.platform=t.platform AND p.spend_date=t.spend_date
GROUP BY spend_date, platform

#1132. Reported Posts II
SELECT ROUND(AVG(cnt), 2) AS average_daily_percent FROM
(SELECT (COUNT(DISTINCT r.post_id)/ COUNT(DISTINCT a.post_id))*100  AS cnt
FROM Actions a
LEFT JOIN Removals r
ON a.post_id = r.post_id
WHERE extra='spam' and action = 'report'
GROUP BY action_date)tmp

#1141. User Activity for the Past 30 Days I
#1142. User Activity for the Past 30 Days II
#1148. Article Views I
#1149. Article Views II
#1158. Market Analysis I
#1159. Market Analysis II
#1164. Product Price at a Given Date
#1173. Immediate Food Delivery I
#1174. Immediate Food Delivery II
#1179. Reformat Department Table
#1193. Monthly Transactions I
#1194. Tournament Winners
#1205. Monthly Transactions II
#1211. Queries Quality and Percentage
#1212. Team Scores in Football Tournament
