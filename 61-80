#1112. Highest Grade For Each Student
SELECT t.student_id, t.course_id, t.grade
FROM 
	(SELECT student_id, course_id, grade, 
	row_number() over (partition by student_id order by grade desc, course_id asc) as r 
	FROM Enrollments) t
WHERE t.r=1
ORDER BY t.student_id asc

With cte as (SELECT student_id, course_id, grade, 
	rank() over (partition by student_id order by grade desc, course_id asc) as r 
	FROM Enrollments) 
        
Select cte.student_id, cte.course_id, cte.grade from cte
where r = 1

#1113. Reported Posts
select extra as report_reason, count(distinct post_id) as report_count
from Actions
where action_date='2019-07-04' 
and extra is not null 
and action='report'
group by extra

#1126. Active Businesses
Select business_id from (
select event_type, avg(occurences) avg_occurences from events e1
group by event_type) as temp1
join events e2 on temp1.event_type = e2.event_type
where e2.occurences > temp1.avg_occurences 
group by business_id
having count(distinct temp1.event_type)>1

#1127. User Purchase Platform ***
# Write your MySQL query statement below
SELECT 
    p.spend_date,
    p.platform,
    IFNULL(SUM(amount), 0) total_amount,
    COUNT(user_id) total_users
FROM 
(
    SELECT DISTINCT(spend_date), 'desktop' platform FROM Spending
    UNION
    SELECT DISTINCT(spend_date), 'mobile' platform FROM Spending
    UNION
    SELECT DISTINCT(spend_date), 'both' platform FROM Spending
) p 
LEFT JOIN (
    SELECT
        spend_date,
        user_id,
        IF(mobile_amount > 0, IF(desktop_amount > 0, 'both', 'mobile'), 'desktop') platform,
        (mobile_amount + desktop_amount) amount
    FROM (
        SELECT
          spend_date,
          user_id,
          SUM(CASE platform WHEN 'mobile' THEN amount ELSE 0 END) mobile_amount,
          SUM(CASE platform WHEN 'desktop' THEN amount ELSE 0 END) desktop_amount
        FROM Spending
        GROUP BY spend_date, user_id
    ) o
) t
ON p.platform=t.platform AND p.spend_date=t.spend_date
GROUP BY spend_date, platform

#1132. Reported Posts II
SELECT ROUND(AVG(cnt), 2) AS average_daily_percent FROM
(SELECT (COUNT(DISTINCT r.post_id)/ COUNT(DISTINCT a.post_id))*100  AS cnt
FROM Actions a
LEFT JOIN Removals r
ON a.post_id = r.post_id
WHERE extra='spam' and action = 'report'
GROUP BY action_date)tmp

#1141. User Activity for the Past 30 Days I
**Datediff(a,b) a-b<30
**WHERE activity_date >= '2019-06-28' and activity_date <= '2019-07-27'
SELECT activity_date day,  count(distinct user_id) as active_users from Activity
Where datediff('2019-07-27', activity_date) < 30
group by activity_date

#1142. User Activity for the Past 30 Days II
**IFNULL for having a result as 0.00 format
select ifnull(round(count(distinct session_id)/count(distinct user_id),2),0.00) as average_sessions_per_user
from activity
where datediff('2019-07-27', activity_date) < 30

#1148. Article Views I
select distinct author_id as id
from views
where author_id = viewer_id
order by 1

#1149. Article Views II
Select distinct viewer_id id from views 
group by viewer_id, view_date 
having count(distinct article_id) >1
order by 1

#1158. Market Analysis I
** Find Year from a date YEAR(column) = '2019'
SELECT user_id AS buyer_id, join_date, COALESCE(COUNT(o.order_id),0) AS orders_in_2019 FROM Users u
LEFT JOIN Orders o ON u.user_id = o.buyer_id 
AND YEAR(order_date)='2019'
GROUP BY 1
ORDER BY 1

#1159. Market Analysis II ***
select user_id as seller_id, 
        (case when favorite_brand = (
                            select i.item_brand
                            from Orders o left join Items i
                            on o.item_id = i.item_id
                            where o.seller_id = u.user_id 
                            order by o.order_date
                            limit 1 offset 1
                                  ) then "yes" else "no" end
         ) as "2nd_item_fav_brand"   
from Users u 

#1164. Product Price at a Given Date
**Use UNION to combine two tables
Select p2.product_id, p2.new_price as price from Products p2
where (p2.Product_id, p2.change_date) in (
Select product_id, max(change_date) from Products
Where change_date <= '2019-08-16'
group by product_id)
UNION
Select product_id, 10 as price from Products
Group by product_id
having min(change_date) > '2019-08-16'

#1173. Immediate Food Delivery I
#1174. Immediate Food Delivery II
#1179. Reformat Department Table
#1193. Monthly Transactions I
#1194. Tournament Winners
#1205. Monthly Transactions II
#1211. Queries Quality and Percentage
#1212. Team Scores in Football Tournament
