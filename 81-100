#1225. Report Contiguous Dates ***
SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date
FROM (
    SELECT 
        day, 
        RANK() OVER (ORDER BY day) AS overall_ranking, 
        stats, 
        rk, 
        (RANK() OVER (ORDER BY day) - rk) AS inv
    FROM (
        SELECT fail_date AS day, 'failed' AS stats, RANK() OVER (ORDER BY fail_date) AS rk
        FROM Failed
        WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31'
        UNION 
        SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rk
        FROM Succeeded
        WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') t
    ) c
GROUP BY inv, stats
ORDER BY start_date

#1241. Number of Comments per Post
select distinct a.sub_id as post_id,
(select count(distinct b.sub_id) from Submissions b where a.sub_id=b.parent_id) as number_of_comments
from Submissions a
where a.parent_id is null
order by post_id

#1251. Average Selling Price
Select p.product_id, round(sum(p.price*u.units)/sum(u.units),2) as average_price from prices p
inner join unitssold u on p.product_id = u.product_id
and u.purchase_date between p.start_date and p.end_date
group by p.product_id

#1264. Page Recommendations
Select distinct page_id recommended_page from likes 
where user_id in (Select user2_id from Friendship f1 
                  where user1_id = 1
                  UNION
                  Select user1_id from Friendship f2
                  Where user2_id = 1)
And page_id not in (Select page_id from Likes where user_id=1)

select distinct page_id as recommended_page from
(select case
when user1_id=1 then user2_id
when user2_id=1 then user1_id end as user_id
from Friendship) a
join Likes on a.user_id=Likes.user_id
where page_id not in (select page_id from Likes where user_id=1)

#1270. All People Report to the Given Manager
SELECT e1.employee_id
FROM Employees e1,
     Employees e2,
     Employees e3
WHERE e1.manager_id = e2.employee_id
  AND e2.manager_id = e3.employee_id
  AND e3.manager_id = 1 
  AND e1.employee_id != 1
  
WITH CTE AS (
    SELECT employee_id
    FROM Employees
    WHERE manager_id = 1 AND employee_id != 1
    UNION ALL
    SELECT e.employee_id
    FROM CTE c INNER JOIN Employees e ON c.employee_id = e.manager_id
)
SELECT employee_id
FROM CTE
ORDER BY employee_id
OPTION (MAXRECURSION 3);

#1280. Students and Examinations
Select Students.student_id, Students.student_name, Subjects.subject_name, count(Examinations.subject_name) attended_exams 
From Students 
Join subjects 
left join Examinations 
on students.student_id=Examinations.student_id and subjects.subject_name=Examinations.subject_name
group by Students.student_id, subjects.subject_name
order by 1, 3

#1285. Find the Start and End Number of Continuous Ranges
**Group by difference. 
SELECT min(log_id) as start_id, max(log_id) as end_id
FROM (SELECT log_id, ROW_NUMBER() OVER(ORDER BY log_id) as num
FROM Logs) a
GROUP BY log_id - num 

#1294. Weather Type in Each Country
**day like '2019-11%' OR day between '' and ''
Select country_name, 
       case when avg(weather_state) <= 15 then 'Cold'
            when avg(weather_state) >= 25 then 'Hot'
       Else 'Warm' End as weather_type
From Countries 
inner join Weather on Countries.country_id = Weather.country_id
where weather.day like '2019-11%'
group by countries.country_id

#1303. Find the Team Size
**Only Partition by, same count number for the same categories. 
Select employee_id, count(team_id) over  (partition by team_id) as team_size from Employee

#1308. Running Total for Different Genders
** Window Function: partition by--group by, same gender has same total; 
                    order by--same gender has increase total, 17-40---
Select gender, day, 
sum(score_points) Over (partition by gender Order by day) total 
From Scores

#1321. Restaurant Growth
**Create two table and combine together. 
SELECT a.visited_on AS visited_on, SUM(b.day_sum) AS amount,
       ROUND(AVG(b.day_sum), 2) AS average_amount
FROM
  (SELECT visited_on, SUM(amount) AS day_sum FROM Customer GROUP BY visited_on ) a,
  (SELECT visited_on, SUM(amount) AS day_sum FROM Customer GROUP BY visited_on ) b
WHERE DATEDIFF(a.visited_on, b.visited_on) BETWEEN 0 AND 6
GROUP BY a.visited_on
HAVING COUNT(b.visited_on) = 7
Method2
SELECT   visited_on, 
         SUM(SUM(amount)) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW)   AS'amount',
         ROUND(CAST(SUM(SUM(amount)) OVER(ORDER BY visited_on ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS FLOAT)/7.0 ,2) AS'average_amount' 
FROM     Customer 
GROUP BY visited_on
ORDER BY visited_on
OFFSET 6 ROWS 

#1322. Ads Performance
SELECT ad_id, IFNULL(ROUND(AVG(CASE WHEN action = 'Clicked' THEN 1
                         WHEN action = 'Viewed' THEN 0
                         ELSE NULL END)*100,2),0) AS ctr
FROM Ads
GROUP BY ad_id
ORDER BY ctr DESC, ad_id

#1327. List the Products Ordered in a Period
select p.product_name,sum(o.unit) as unit from Products p
join Orders o on p.product_id = o.product_id
where O.order_date like '2020-02%'
group by p.product_name
having sum(o.unit) >= 100

#1336. Number of Transactions per Visit ***
WITH T AS (
SELECT ROW_NUMBER() OVER() row_num
FROM Transactions
UNION 
SELECT 0
), 
T1 as (
SELECT COUNT(transaction_date) transaction_count
FROM Visits v
LEFT JOIN Transactions t
ON v.user_id = t.user_id
AND v.visit_date = transaction_date
GROUP BY v.user_id, v.visit_date
)

SELECT row_num transactions_count, COUNT(transaction_count) visits_count
FROM T
LEFT JOIN T1
ON row_num = transaction_count
GROUP BY row_num
HAVING row_num <= (SELECT MAX(transaction_count) FROM T1)
ORDER BY row_num

#1341. Movie Rating
#1350. Students With Invalid Departments
#1355. Activity Participants
#1364. Number of Trusted Contacts of a Customer
#1369. Get the Second Most Recent Activity ***
SELECT * 
FROM UserActivity 
GROUP BY username 
HAVING COUNT(*) = 1

UNION ALL

SELECT u1.*
FROM UserActivity u1 
LEFT JOIN UserActivity u2 
    ON u1.username = u2.username AND u1.endDate < u2.endDate
GROUP BY u1.username, u1.endDate
HAVING COUNT(u2.endDate) = 1

#
